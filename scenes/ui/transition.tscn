[gd_scene load_steps=4 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasLayer

const TRANSITION_IN = 0
const TRANSITION_OUT = 1

# Called when the node enters the scene tree for the first time.
func _ready():
	pass

func changeScene(scene):
	play(TRANSITION_OUT)
	yield(get_tree().create_timer(1), \"timeout\")
	get_tree().change_scene(scene)
	
func reloadScene():
	play(TRANSITION_OUT)
	yield(get_tree().create_timer(1), \"timeout\")
	get_tree().reload_current_scene()

func play(transition):
	$transition.visible = true
	if(transition == TRANSITION_IN):
		$transition/Panel.modulate = Color(0, 0, 0, 255)
		$transition/AnimationPlayer.play(\"in\")
	else:
		$transition/Panel.modulate = Color(0, 0, 0, 0)
		$transition/AnimationPlayer.play(\"out\")


func _on_AnimationPlayer_animation_finished(anim_name):
	$transition.visible = false
"

[sub_resource type="Animation" id=2]
tracks/0/type = "value"
tracks/0/path = NodePath("Panel:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=3]
tracks/0/type = "value"
tracks/0/path = NodePath("Panel:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ), Color( 0, 0, 0, 1 ) ]
}

[node name="transition" type="CanvasLayer"]
layer = 128
script = SubResource( 1 )

[node name="transition" type="Control" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="transition"]
modulate = Color( 0, 0, 0, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="transition"]
anims/in = SubResource( 2 )
anims/out = SubResource( 3 )
[connection signal="animation_finished" from="transition/AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
